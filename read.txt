#修改镜像
#npm install -g cnpm --registry=https://registry.npmmirror.com

#查看镜像
#npm config get registry

#vue 创建项目不能以驼峰命名
只能通过小写或者下划线的形式来命名文件名

nodejs:v14.18.1   |v16.16.0  |   npm ；8.11.0
vue/cli:4.5.15     |5.0.8
npm install -g @vue/cli@4.5.15
更新：npm i -g @vue/cli

====
yarn global add @vue/cli
====
node修改版本  | 务必直接删除卸载node后重新下载安装配置环境！！
C:\Users\zyj>nvm ls
  * 16.18.1 (Currently using 64-bit executable)
C:\Users\zyj>nvm install 14.18.1
Downloading node.js version 14.18.1 (64-bit)...
Complete
Creating D:\nvm\nvm\temp

C:\Users\zyj>nvm use 14.18.1
Now using node v14.18.1 (64-bit)

C:\Users\zyj>node -v
v14.18.1

C:\Users\zyj>where node
D:\nvm\nodejs\node.exe
====
vue3+vite
yarn create vite my-vue --template vue

yarn install
=====
安装element-ui
npm i element-ui -S
====
组件按需引入和全局引入的区别：
按需引入：(优势：项目打包时可以减小项目体积。我们部署项目就是部署打包后的文件：dist文件夹)
1.npm install babel-plugin-components -D
2.按照帮助文档修改babel.c.j中的内容   =>L4-L14
3.在main.js中按照组件引入  =>  import {Row,Button} from 'element-ui';
------
全局引入：main.js中引入的是 Vue.use(ElementUI)

====
路由：
1.npm install vue-router@3.6.5
2.配置router =>在router文件夹下的indx.js中配置信息
3.每一个路由哦都要对应一个组件

====
eslint：代码规范错误
解决：vue.config.js文件de defineConfig中添加属性lintOnSave:false

===
app.vue是主机面
main.js是主入口

====
嵌套路由（分为公共部分和子路由：不变的地方是公共路由，变的地方是子路由）
const routes =[
    // 主路由
    {path:'/',
    component:Main,
    children:[
        // 子路由
        {path:'home',component:Home},
        {path:'user',component:User}
    ]
    }
    

]
=====
ElementUI引用：https://element.eleme.cn/#/zh-CN/component/container


=====
菜单：一级菜单和二级菜单

=====
<el-menu-item v-for="item in noChildren" :key="item.name" :index="item.name">
            <i :class="`el-icon-${item.icon}`"></i>
            <span slot="title">{{item.label}}</span>
</el-menu-item>
:key="" 【""双引号中是唯一值】
el-icon-${item.icon}` ： $之前是固定的，$后面是改变的。

======
less版本：
npm i less@4.1.2 
npm i less-loader@5.0.0    less-loader是解析器
确认版本 在npm上查找less 进入对应的页面 找到less版本

=====
在elementUI里面找图标的时候
用ctrl+F搜索页面的图标

=====
菜单按钮
上下居中，左右两边靠边显示
padding: 0 20px;
display: flex;
justify-content: space-between;
align-items: center;

=====
引入vuex3.0
npm i vuex@3.6.2


=====
自适应布局
栅格窗格

=====
自行练习：
js基础
js高级
js应用

======
做真正的企业级项目

======
margin和padding的区别
margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离。(外边距)
padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内距离。(内边距)

======
报错信息：
error Custom elements in iteration require 'v-bind:key' directives vue/valid
解决办法：
vue规定使用v-for条件渲染时，必须设置一个key，修改如下图（添加:key="key"）

======
flex-wrap:wrap;  是强制换行

======
axios版本：
npm i axios@0.27.2

======
mock.js  [前端模拟后端接口的工具]
生成随即数据，拦截Ajax请求
npm i mockjs@1.1.0


=====
echarts
npm i echarts@5.1.2

=====
vue关闭严格模式：
package.json文件下面：
"rules": {
      "no-unused-vars":"off"
    }

=====
 delUser()里面应该传递一个对象。
 Uncaught SyntaxError: Unexpected token B in JSON at position 2
 报错的时候，点击错误，进入控制台查看错误。

 ====
 Pagination 分页

 ====
 Table Attributes 用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。

 ====
 绑定的是事件
 用@
 绑定的是属性
 用:

 =====
 404错误：mock拦截出了问题

拦截器拦截方式：
1️⃣按照当前路径进行匹配。
2️⃣用正则表达式。例如  Mock.mock(/api\/user\/getUser/,user.getUserList)

======
双飞翼布局：侧边两栏宽度固定，中间栏宽度自适应。

双飞翼布局要求：
header和footer各自占领屏幕所有宽度，高度固定。
中间的container是一个三栏布局。
三栏布局两侧宽度固定不变，中间部分自动填充整个区域。
中间部分的高度是三栏中最高的区域的高度。

举例子：
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <script src="http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js"></script>
</head>
<style>
  body {
    min-width: 550px;
    font-weight: bold;
    font-size: 20px;
  }
  #header,#footer {
    background: rgba(29, 27, 27, 0.726);
    text-align: center;
    height: 60px;
    line-height: 60px;
  }
  #container {
    overflow: hidden;
  }
  .column {
    text-align: center;
    height: 300px;
    line-height: 300px;
  }
  #left, #right, #center {
    float: left;
  }
  #center {
    width: 100%;
    background: rgb(206, 201, 201);
  }
  #left {
    width: 200px;
    margin-left: -100%;
    background: rgba(95, 179, 235, 0.972);
  }
  #right {
    width: 150px;
    margin-left: -150px;
    background: rgb(231, 105, 2);
  }
  .content {
    margin: 0 150px 0 200px;
  }
</style>

<body>
  <div id="header">#header</div>

  <div id="container">
    <div id="center" class="column">
      <div class="content">#center</div>
    </div>
    <div id="left" class="column">#left</div>
    <div id="right" class="column">#right</div>
  </div>

  <div id="footer">#footer</div>
</body>

</html>

======
表单校验：
在el-form中添加rules表单校验

======
不同用户登录后看到的内容不一样。
如何给用户添加上用户权限：
token
判断用户在系统中是否合法用的是token，他本身是一个字符串。
token什么时候生成：
在当前登录中，输入完用户名，点击登录，调用登录接口，后端返回一个token。
进入页面，调用具体接口，把token作为请求头，
header，把token作为属性，请求后端时，
后端可以从请求头里面获取token信息，
后端通过token来验证，判断当前用户是否合法，有没有超时等权限判断。

通过token可以判断用户当前是否已经登录。

=====
下载 js-cookie插件
npm i js-cookie@3.0.1

======
页面跳转时有导航守卫：

======
1.不同账户的登录，会有不同的菜单权限。
2.通过url输入地址来显示页面
【不应该通过url访问地址。 ‘动态路由’】
-通过用户权限，动态的注册路由。
3.对于菜单的数据在不同页面之间的数据通信
【跨页面之间的数据通信，缓存来实现】